<?php

namespace Domain\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Domain\CoreBundle\Entity\User;

/**
 * ExpertRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpertRequestRepository extends EntityRepository
{
    /**
     * Find users active request
     *
     * @param User $user
     *
     * @return null | \Domain\CoreBundle\Entity\ExpertRequest
     */
    public function getActiveByUser(User $user)
    {
        return $this->findOneBy(
            [
                'user' => $user,
                'status' => 0
            ]
        );
    }

    /**
     * Generate query to get all active requests
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function queryBuilderActiveRequests()
    {
        $qb = $this->createQueryBuilder('r');
        $qb
            ->leftJoin('r.user', 'u', Expr\Join::WITH)
            ->where('r.status = :status')
            ->setParameter('status', 0);
            //->orderBy('r.created', 'DESC');

        return $qb;
    }

    /**
     * find all active entities
     *
     * @return array
     */
    public function findAllActive()
    {
        return $this->queryBuilderActiveRequests()
            ->getQuery()->getResult();
    }

    /**
     * Find active requests by ids
     *
     * @param array $ids
     *
     * @return array | null
     */
    public function findActiveByIds($ids)
    {
        if (empty($ids)) {
            return null;
        }
        if (!is_array($ids)) {
            $ids = [$ids];
        }

        $qb = $this->queryBuilderActiveRequests();

        return $qb
            ->andWhere($qb->expr()->in('r.id', ':ids'))
        ->setParameter('ids', $ids)
            ->getQuery()->getResult();
    }

    /**
     * Return count of active requests
     *
     * @return int
     */
    public function countOfActiveRequest()
    {
        $qb = $this->queryBuilderActiveRequests();

        return (int)$qb->select($qb->expr()->count('r.id'))
            ->getQuery()->getSingleScalarResult();
    }
}
